import os
import json
import faiss
import torch
import argparse
import numpy as np
from tqdm import tqdm
from pathlib import Path
from sentence_transformers import SentenceTransformer


def load_chunks(chunks_path):
    """Load chunks.jsonl generated by ingest_pdf.py"""
    chunks = []
    with open(chunks_path, "r", encoding="utf-8") as f:
        for line in f:
            chunks.append(json.loads(line))
    return chunks


def build_embeddings(chunks, model_name="sentence-transformers/all-MiniLM-L6-v2", batch_size=32, device=None):
    """Compute embeddings for each chunk text using a Hugging Face model"""
    print(f"[INFO] Loading embedding model: {model_name}")
    model = SentenceTransformer(model_name, device=device or ("cuda" if torch.cuda.is_available() else "cpu"))

    texts = [chunk["text"] for chunk in chunks]
    embeddings = []

    for i in tqdm(range(0, len(texts), batch_size), desc="Encoding chunks"):
        batch_texts = texts[i:i + batch_size]
        batch_embeddings = model.encode(batch_texts, show_progress_bar=False, convert_to_numpy=True, normalize_embeddings=True)
        embeddings.append(batch_embeddings)

    embeddings = np.vstack(embeddings)
    return embeddings


def save_faiss_index(embeddings, chunks, out_dir):
    """Save FAISS index and metadata mapping"""
    Path(out_dir).mkdir(parents=True, exist_ok=True)

    dim = embeddings.shape[1]
    index = faiss.IndexFlatIP(dim)  # cosine similarity (since embeddings normalized)
    index.add(embeddings)

    faiss.write_index(index, str(Path(out_dir) / "faiss_index.bin"))
    print(f"[✓] FAISS index saved → {out_dir}/faiss_index.bin")

    metadata = {i: {"id": c["id"], "page": c["page"], "context": c["context"]} for i, c in enumerate(chunks)}
    with open(Path(out_dir) / "metadata.json", "w", encoding="utf-8") as f:
        json.dump(metadata, f, ensure_ascii=False, indent=2)
    print(f"[✓] Metadata saved → {out_dir}/metadata.json")


def main(chunks_path, out_dir, model_name="sentence-transformers/all-MiniLM-L6-v2", batch_size=32):
    chunks = load_chunks(chunks_path)
    print(f"[INFO] Loaded {len(chunks)} chunks from {chunks_path}")

    embeddings = build_embeddings(chunks, model_name=model_name, batch_size=batch_size)
    save_faiss_index(embeddings, chunks, out_dir)
    print("[✓] Indexing completed successfully.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--chunks", required=True, help="Path to chunks.jsonl")
    parser.add_argument("--out_dir", default="data/index", help="Output directory for FAISS index")
    parser.add_argument("--model_name", default="sentence-transformers/all-MiniLM-L6-v2", help="HF model for embeddings")
    parser.add_argument("--batch_size", type=int, default=32)
    args = parser.parse_args()

    main(
        chunks_path=args.chunks,
        out_dir=args.out_dir,
        model_name=args.model_name,
        batch_size=args.batch_size,
    )
